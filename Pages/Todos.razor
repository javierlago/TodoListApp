@page "/todos"

@* —— Feedback placeholder —— *@
@if (!string.IsNullOrWhiteSpace(feedbackText))
{
    <Feedback Text="@feedbackText"
              Type="@feedbackType"
              AutoHideMs="@feedbackAutoHideMs"
              OnClosed="HandleFeedbackClosed" />
}

<div class="container mt-4">
    <h3 class="mb-4">Lista de Tareas</h3>
</div>
<p>Tareas pendientes: @PendingCount</p>

@if (Items == null || !Items.Any())
{
    <p>No hay tareas aún.</p>
}
else
{
<div class="container mt-4">
    <button class="btn btn-sm @(currentFilter == ViewFilter.All ? "btn-primary" : "btn-outline-primary")"
            @onclick="() => currentFilter = ViewFilter.All">
        Todas
    </button>

    <button class="btn btn-sm @(currentFilter == ViewFilter.Active ? "btn-primary" : "btn-outline-primary")"
            @onclick="() => currentFilter = ViewFilter.Active">
        Pendientes
    </button>

    <button class="btn btn-sm @(currentFilter == ViewFilter.Completed ? "btn-primary" : "btn-outline-primary")"
            @onclick="() => currentFilter = ViewFilter.Completed">
        Hechas
    </button>



</div>



<button class="btn btn-outline-danger"
        @onclick="ClearCompletedAsync"
        disabled="@(Items == null || !HasCompleted)">
    Limpiar completadas
</button>




<div class="todo-grid">
    @foreach (var item in GetViewItems())
    {
        <div class="todo-card">
            <div class="todo-card-header">
                @item.Title
            </div>

            <div class="todo-card-body">
                @if (editingId == item.Id)
                {
                    <InputText class="form-control"
                               @bind-Value="editedTitle" />
                    <div class="mt-2">
                        <button class="btn btn-success btn-sm me-2"
                                @onclick="@(() => SaveEdit(item.Id))">
                            Guardar
                        </button>
                        <button class="btn btn-secondary btn-sm"
                                @onclick="CancelEdit">
                            Cancelar
                        </button>
                    </div>
                }
                else
                {
                    <label class="todo-checkbox">
                        <input type="checkbox"
                               checked="@item.IsDone"
                               @onchange="@(() => ToggleDone(item.Id))" />
                        <span class="ms-2">
                            @(item.IsDone ? "Realizada" : "Pendiente")
                        </span>
                    </label>

                    <div class="todo-actions mt-3">
                        <button class="btn-delete me-2"
                                @onclick="@(() => DeleteTodo(item.Id))">
                            Eliminar
                        </button>
                        <button class="btn-edit"
                                @onclick="@(() => StartEdit(item))">
                            Editar
                        </button>
                    </div>
                }
            </div>
        </div>
    }
</div>




}
<div class="todo-card mb-4">
    <div class="todo-card-header">
        Nueva tarea
    </div>

    <div class="todo-card-body">
        <EditForm Model="@newItem" OnValidSubmit="AddTodo">
            <DataAnnotationsValidator />

            <div class="d-flex flex-column flex-sm-row align-items-start align-items-sm-center gap-2">
                <div>
                    <label class="form-label mb-1">Título</label>
                    <InputText class="form-control" @bind-Value="newItem.Title" />
                    <ValidationMessage For="@(() => newItem.Title)" />
                </div>

                <button type="submit" class="btn btn-primary align-self-end">
                    Añadir
                </button>
            </div>
        </EditForm>
    </div>
</div>

